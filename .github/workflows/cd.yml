name: CD

on:
  push:
    branches: [ master ] # Change this to the branch you want to deploy from (e.g., dev)

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'  # Specify your Python version
      - name: Set up Node.js for PM2
        run: |
          # Install NVM
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
          # Source NVM to make it available in the current shell session
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          # Install the latest Node.js version
          nvm install v20.16.0
          # Install PM2 globally
          npm install -g pm2

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          # Save the SSH key to a file
          echo "$EC2_SSH_KEY" > fastapi-blogs-app.pem
          chmod 600 fastapi-blogs-app.pem

          # Ensure .ssh directory exists
          mkdir -p ~/.ssh

          # Add the EC2 host to known hosts
          ssh-keyscan -H ec2-$EC2_HOST.ap-southeast-1.compute.amazonaws.com >> ~/.ssh/known_hosts

          # Connect to EC2 and deploy
          ssh -i fastapi-blogs-app.pem $EC2_USER@ec2-$EC2_HOST.ap-southeast-1.compute.amazonaws.com << 'EOF'
            # Navigate to your app directory
            cd FastAPI-SQLAlchemy  # Change this to your app's path

            # Load NVM and install PM2 if it is not installed
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            # Check if PM2 is installed; if not, install it
            if ! command -v pm2 &> /dev/null; then
              npm install -g pm2
            fi

            # Pull the latest changes from your repository
            git pull origin master # Change this to the branch you are deploying from

            # Create virtual environment if it doesn't exist
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi

            # Activate virtual environment
            source venv/bin/activate

            # Install or update your Python dependencies
            pip install -r requirements.txt

            # Use PM2 to manage the FastAPI application
            pm2 start python3 --name "blogs-app" -- run main.py || pm2 restart blogs-app
          EOF

          # Clean up the SSH key file
          rm fastapi-blogs-app.pem
